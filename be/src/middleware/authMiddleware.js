/**
 * üõ°Ô∏è MIDDLEWARE DE AUTENTICACI√ìN - GU√çA EDUCATIVA
 *
 * ¬øQu√© es un middleware?
 * - Funci√≥n que se ejecuta entre la petici√≥n y la respuesta
 * - Puede modificar req, res o terminar la petici√≥n
 * - Debe llamar next() para continuar al siguiente middleware
 *
 * ¬øPor qu√© usamos middlewares?
 * - Reutilizaci√≥n: una vez escrito, se usa en m√∫ltiples rutas
 * - Separaci√≥n de responsabilidades: autenticaci√≥n separada de l√≥gica de negocio
 * - Orden de ejecuci√≥n: se ejecutan en el orden que se definen
 *
 * Este middleware implementa RF-003: Validaci√≥n de Token JWT
 */

const jwt = require('jsonwebtoken');
const User = require('../models/User');

/**
 * üîê RF-003: VALIDACI√ìN DE TOKEN JWT
 *
 * Este middleware protege rutas que requieren autenticaci√≥n.
 * Se ejecuta ANTES de los controladores de rutas protegidas.
 *
 * Flujo de validaci√≥n:
 * 1. Extraer token del header Authorization
 * 2. Verificar formato Bearer
 * 3. Validar token con JWT
 * 4. Buscar usuario en BD
 * 5. Adjuntar usuario a req para uso posterior
 *
 * @param {Object} req - Request de Express
 * @param {Object} res - Response de Express
 * @param {Function} next - Funci√≥n para continuar al siguiente middleware
 */
const authMiddleware = async (req, res, next) => {
  try {
    // üì• EXTRAER TOKEN DEL HEADER
    // El header Authorization debe tener formato: "Bearer <token>"
    const authHeader = req.headers.authorization;

    if (!authHeader) {
      // Status 401: Unauthorized - credenciales faltantes o inv√°lidas
      return res.status(401).json({
        success: false,
        message: 'Token de acceso requerido',
      });
    }

    // üîç VERIFICAR FORMATO BEARER
    // Est√°ndar RFC 6750 para tokens de portador
    if (!authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: 'Formato de token inv√°lido. Use: Bearer <token>',
      });
    }

    // ‚úÇÔ∏è EXTRAER EL TOKEN
    // Remover "Bearer " (7 caracteres) del inicio
    const token = authHeader.substring(7);

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Token no proporcionado',
      });
    }

    // üîì VERIFICAR Y DECODIFICAR EL TOKEN
    let decoded;
    try {
      // jwt.verify() valida la firma y la expiraci√≥n autom√°ticamente
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (jwtError) {
      // üö® MANEJO ESPEC√çFICO DE ERRORES JWT
      if (jwtError.name === 'TokenExpiredError') {
        return res.status(401).json({
          success: false,
          message: 'Token expirado',
        });
      } else if (jwtError.name === 'JsonWebTokenError') {
        return res.status(401).json({
          success: false,
          message: 'Token inv√°lido',
        });
      } else {
        return res.status(401).json({
          success: false,
          message: 'Error al verificar token',
        });
      }
    }

    // Verificar que el usuario existe
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({
        success: false,
        message: 'Usuario no encontrado',
      });
    }

    // Adjuntar informaci√≥n del usuario a la request
    req.userId = decoded.userId;
    req.user = user;

    next();
  } catch (error) {
    console.error('Error en middleware de autenticaci√≥n:', error);
    res.status(500).json({
      success: false,
      message: 'Error interno del servidor',
    });
  }
};

// Middleware opcional - no requiere autenticaci√≥n pero la procesa si est√° presente
const optionalAuth = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;

    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);

      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.userId);

        if (user) {
          req.userId = decoded.userId;
          req.user = user;
        }
      } catch (jwtError) {
        // En middleware opcional, ignoramos errores de JWT
        console.log('Token opcional inv√°lido:', jwtError.message);
      }
    }

    next();
  } catch (error) {
    console.error('Error en middleware opcional:', error);
    next(); // Continuar sin autenticaci√≥n
  }
};

module.exports = {
  authMiddleware,
  optionalAuth,
};
