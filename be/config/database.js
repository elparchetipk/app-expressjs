/**
 * CONFIGURACI√ìN DE BASE DE DATOS SQLITE
 *
 * Este archivo maneja toda la configuraci√≥n y conexi√≥n a la base de datos SQLite.
 *
 * ¬øPor qu√© SQLite?
 * - Base de datos ligera y sin servidor
 * - Perfecta para desarrollo y aplicaciones peque√±as/medianas
 * - No requiere instalaci√≥n de servidor de BD separado
 * - Almacena todo en un solo archivo
 * - Ideal para prototipado y aprendizaje
 *
 * ¬øCu√°ndo NO usar SQLite?
 * - Aplicaciones con m√∫ltiples escritores concurrentes
 * - Aplicaciones que requieren alta escalabilidad
 * - Sistemas distribuidos
 *
 * Alternativas para producci√≥n: PostgreSQL, MySQL, MongoDB
 */

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

/**
 * CONFIGURACI√ìN DE RUTAS
 *
 * __dirname: Directorio actual donde se encuentra este archivo
 * path.join(): Une rutas de forma segura, independiente del SO
 * '..': Sube un nivel en la estructura de carpetas
 */
const DB_PATH = path.join(__dirname, '..', 'database.sqlite');

// Variable global para mantener la conexi√≥n a la base de datos
let db = null;

/**
 * FUNCI√ìN PARA INICIALIZAR LA BASE DE DATOS
 *
 * Esta funci√≥n:
 * 1. Crea/conecta a la base de datos SQLite
 * 2. Crea las tablas necesarias si no existen
 * 3. Retorna una Promise para manejo as√≠ncrono
 *
 * ¬øPor qu√© usar Promises?
 * - SQLite3 usa callbacks por defecto
 * - Las Promises son m√°s f√°ciles de manejar con async/await
 * - Evita el "callback hell"
 * - Mejor control de errores
 */
const initDatabase = () => {
  return new Promise((resolve, reject) => {
    // Crear/conectar a la base de datos
    db = new sqlite3.Database(DB_PATH, (err) => {
      if (err) {
        console.error(
          '‚ùå Error al conectar con la base de datos:',
          err.message
        );
        reject(err);
      } else {
        console.log('‚úÖ Conectado a la base de datos SQLite');
        console.log(`üìÅ Ubicaci√≥n de la BD: ${DB_PATH}`);

        // Despu√©s de conectar, crear las tablas
        createTables()
          .then(() => resolve())
          .catch(reject);
      }
    });
  });
};

/**
 * FUNCI√ìN PARA CREAR TABLAS
 *
 * Define la estructura de la tabla 'users' seg√∫n los RF's:
 * - id: Clave primaria auto-incremental
 * - email: √önico y obligatorio
 * - nombres: Nombre(s) del usuario
 * - apellidos: Apellidos del usuario
 * - password: Contrase√±a encriptada
 * - created_at: Fecha de creaci√≥n autom√°tica
 * - updated_at: Fecha de √∫ltima actualizaci√≥n
 *
 * ¬øPor qu√© estos campos espec√≠ficos?
 * - Seg√∫n RF-001, se requieren email, nombres, apellidos y password
 * - created_at/updated_at son buenas pr√°cticas para auditor√≠a
 * - id auto-incremental es est√°ndar para claves primarias
 */
const createTables = () => {
  return new Promise((resolve, reject) => {
    const createUsersTable = `
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        nombres TEXT NOT NULL,
        apellidos TEXT NOT NULL,
        password TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `;

    /**
     * EXPLICACI√ìN DE LA ESTRUCTURA DE LA TABLA:
     *
     * - INTEGER PRIMARY KEY AUTOINCREMENT:
     *   Clave primaria que se incrementa autom√°ticamente
     *
     * - TEXT UNIQUE NOT NULL (email):
     *   Campo de texto √∫nico y obligatorio para evitar duplicados
     *
     * - TEXT NOT NULL (nombres, apellidos, password):
     *   Campos de texto obligatorios
     *
     * - DATETIME DEFAULT CURRENT_TIMESTAMP:
     *   Fecha/hora que se asigna autom√°ticamente al crear/actualizar
     *
     * - CREATE TABLE IF NOT EXISTS:
     *   Solo crea la tabla si no existe, evita errores en m√∫ltiples ejecuciones
     */

    db.run(createUsersTable, (err) => {
      if (err) {
        console.error('‚ùå Error al crear tabla users:', err.message);
        reject(err);
      } else {
        console.log('‚úÖ Tabla users creada o ya existe');

        // Opcional: Mostrar informaci√≥n sobre la tabla creada
        showTableInfo();
        resolve();
      }
    });
  });
};

/**
 * FUNCI√ìN PARA MOSTRAR INFORMACI√ìN DE LA TABLA (EDUCATIVA)
 *
 * Esta funci√≥n es opcional y solo para fines educativos.
 * Muestra la estructura de la tabla en la consola.
 */
const showTableInfo = () => {
  db.all('PRAGMA table_info(users)', (err, rows) => {
    if (!err && rows.length > 0) {
      console.log('üìã Estructura de la tabla users:');
      rows.forEach((column) => {
        console.log(
          `   - ${column.name}: ${column.type} ${
            column.notnull ? '(NOT NULL)' : ''
          } ${column.pk ? '(PRIMARY KEY)' : ''}`
        );
      });
    }
  });
};

/**
 * FUNCI√ìN PARA OBTENER LA INSTANCIA DE LA BASE DE DATOS
 *
 * Esta funci√≥n permite que otros m√≥dulos accedan a la conexi√≥n de BD.
 * Incluye validaci√≥n para asegurar que la BD est√© inicializada.
 *
 * ¬øPor qu√© no exportar 'db' directamente?
 * - Evita errores si se intenta usar antes de inicializar
 * - Proporciona un mensaje de error claro
 * - Mejor control del flujo de la aplicaci√≥n
 */
const getDatabase = () => {
  if (!db) {
    throw new Error(
      '‚ùå Base de datos no inicializada. Llama a initDatabase() primero.'
    );
  }
  return db;
};

/**
 * FUNCI√ìN PARA CERRAR LA CONEXI√ìN DE BASE DE DATOS
 *
 * Importante para:
 * - Liberar recursos al cerrar la aplicaci√≥n
 * - Asegurar que los datos se escriban correctamente
 * - Buenas pr√°cticas de manejo de conexiones
 *
 * Se usa t√≠picamente en:
 * - Se√±ales de cierre de la aplicaci√≥n (SIGINT, SIGTERM)
 * - Tests unitarios
 * - Scripts de migraci√≥n
 */
const closeDatabase = () => {
  return new Promise((resolve) => {
    if (db) {
      db.close((err) => {
        if (err) {
          console.error('‚ùå Error al cerrar la base de datos:', err.message);
        } else {
          console.log('‚úÖ Conexi√≥n a la base de datos cerrada correctamente');
        }
        resolve();
      });
    } else {
      resolve();
    }
  });
};

/**
 * FUNCIONES UTILITARIAS ADICIONALES PARA DESARROLLO
 */

/**
 * Funci√≥n para ejecutar queries de desarrollo/debug
 * ¬°NUNCA usar en producci√≥n!
 */
const executeQuery = (query, params = []) => {
  return new Promise((resolve, reject) => {
    if (process.env.NODE_ENV === 'production') {
      reject(new Error('executeQuery no disponible en producci√≥n'));
      return;
    }

    db.all(query, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
};

/**
 * EXPORTACI√ìN DE M√ìDULOS
 *
 * Exportamos solo las funciones necesarias para el resto de la aplicaci√≥n.
 * Esto es un ejemplo del patr√≥n "Module Pattern" que encapsula
 * la implementaci√≥n interna y expone solo la interfaz p√∫blica.
 */
module.exports = {
  initDatabase,
  getDatabase,
  closeDatabase,
  // Funci√≥n de desarrollo (solo disponible en modo desarrollo)
  ...(process.env.NODE_ENV !== 'production' && { executeQuery }),
};
